{"dependencyTree":{"name":"_layout.tsx","fileID":"03e129e08c9cbdd17b78a626b3539b0c","children":[{"name":"index.ts","fileID":"74c48af6634ba4e301a72ed6349faf6d","children":[{"name":"TabBar.tsx","fileID":"c023d960451daec1f887f1f059730b25","children":[{"name":"TabBar.types.ts","fileID":"9da451b65a8c7f737cf4c86543852297","children":[]},{"name":"TabBarIcon.tsx","fileID":"708e91d8845891b542347ca64ae263a4","children":[{"name":"TabBarIcon.types.ts","fileID":"e719202d8095a83f87627ff2aac4d35a","children":[]},{"name":"theme.ts","fileID":"7f6053ddcc90e03860889f843215033f","children":[]}]},{"name":"theme.ts","fileID":"7f6053ddcc90e03860889f843215033f","children":[]},{"name":"useTheme.ts","fileID":"0d52f2f5054d5e41c0575a8b86b31ea8","children":[]},{"name":"NotificationContext.tsx","fileID":"47fb8279b41c64a9d8477e8b585b05a2","children":[{"name":"config.ts","fileID":"aed8de387df9c9c3657ce8f8493c15b1","children":[]},{"name":"api.ts","fileID":"234588e8ab809c61aece6c66403a3812","children":[]},{"name":"enums.ts","fileID":"778437e8c0dc203a0fccdb6936c29be8","children":[]},{"name":"models.ts","fileID":"770c3792fd9003adc608e06cb4e6fb7a","children":[{"name":"enums.ts","fileID":"778437e8c0dc203a0fccdb6936c29be8","children":[]}]},{"name":"errors.ts","fileID":"1b4974cfc8307813b1990c85adc88052","children":[{"name":"api.ts","fileID":"234588e8ab809c61aece6c66403a3812","children":[]},{"name":"config.ts","fileID":"aed8de387df9c9c3657ce8f8493c15b1","children":[]}]},{"name":"storage.ts","fileID":"c2097ebb51806c377c6e9907a47fae7b","children":[]},{"name":"notificationService.ts","fileID":"035fb01b40e637252888803129277da2","children":[{"name":"databaseService.ts","fileID":"2e0db00772add360af8f45c915ef2307","children":[{"name":"database.types.ts","fileID":"ec752bffe7da912d0d687420b3a7b3b6","children":[]},{"name":"config.ts","fileID":"aed8de387df9c9c3657ce8f8493c15b1","children":[]}]},{"name":"config.ts","fileID":"aed8de387df9c9c3657ce8f8493c15b1","children":[]},{"name":"api.ts","fileID":"234588e8ab809c61aece6c66403a3812","children":[]},{"name":"models.ts","fileID":"770c3792fd9003adc608e06cb4e6fb7a","children":[{"name":"enums.ts","fileID":"778437e8c0dc203a0fccdb6936c29be8","children":[]}]},{"name":"enums.ts","fileID":"778437e8c0dc203a0fccdb6936c29be8","children":[]},{"name":"errors.ts","fileID":"1b4974cfc8307813b1990c85adc88052","children":[{"name":"api.ts","fileID":"234588e8ab809c61aece6c66403a3812","children":[]},{"name":"config.ts","fileID":"aed8de387df9c9c3657ce8f8493c15b1","children":[]}]}]},{"name":"databaseService.ts","fileID":"2e0db00772add360af8f45c915ef2307","children":[{"name":"database.types.ts","fileID":"ec752bffe7da912d0d687420b3a7b3b6","children":[]},{"name":"config.ts","fileID":"aed8de387df9c9c3657ce8f8493c15b1","children":[]}]}]}]},{"name":"TabBarIcon.tsx","fileID":"708e91d8845891b542347ca64ae263a4","children":[{"name":"TabBarIcon.types.ts","fileID":"e719202d8095a83f87627ff2aac4d35a","children":[]},{"name":"theme.ts","fileID":"7f6053ddcc90e03860889f843215033f","children":[]}]},{"name":"TabBar.types.ts","fileID":"9da451b65a8c7f737cf4c86543852297","children":[]},{"name":"TabBarIcon.types.ts","fileID":"e719202d8095a83f87627ff2aac4d35a","children":[]}]},{"name":"useTheme.ts","fileID":"0d52f2f5054d5e41c0575a8b86b31ea8","children":[]}]},"dependencyNodes":{"03e129e08c9cbdd17b78a626b3539b0c":{"fileID":"03e129e08c9cbdd17b78a626b3539b0c","name":"_layout.tsx","type":"react_ts","extension":".tsx","language":"file","relativePath":"/app/(tabs)/_layout.tsx","fileDescription":{},"children":["74c48af6634ba4e301a72ed6349faf6d","0d52f2f5054d5e41c0575a8b86b31ea8"]},"74c48af6634ba4e301a72ed6349faf6d":{"fileID":"74c48af6634ba4e301a72ed6349faf6d","name":"index.ts","type":"typescript","extension":".ts","language":"file","lines":6,"analyzed":true,"relativePath":"/components/Layout/TabBar/index.ts","fileDescription":{},"functions":[],"children":["c023d960451daec1f887f1f059730b25","708e91d8845891b542347ca64ae263a4","9da451b65a8c7f737cf4c86543852297","e719202d8095a83f87627ff2aac4d35a"]},"0d52f2f5054d5e41c0575a8b86b31ea8":{"fileID":"0d52f2f5054d5e41c0575a8b86b31ea8","name":"useTheme.ts","type":"typescript","extension":".ts","language":"file","relativePath":"/hooks/ui/useTheme.ts","fileDescription":{},"children":[]},"c023d960451daec1f887f1f059730b25":{"fileID":"c023d960451daec1f887f1f059730b25","name":"TabBar.tsx","type":"react_ts","extension":".tsx","language":"file","relativePath":"/components/Layout/TabBar/TabBar.tsx","fileDescription":{},"children":["9da451b65a8c7f737cf4c86543852297","708e91d8845891b542347ca64ae263a4","7f6053ddcc90e03860889f843215033f","0d52f2f5054d5e41c0575a8b86b31ea8","47fb8279b41c64a9d8477e8b585b05a2"]},"708e91d8845891b542347ca64ae263a4":{"fileID":"708e91d8845891b542347ca64ae263a4","name":"TabBarIcon.tsx","type":"react_ts","extension":".tsx","language":"file","relativePath":"/components/Layout/TabBar/TabBarIcon.tsx","fileDescription":{},"children":["e719202d8095a83f87627ff2aac4d35a","7f6053ddcc90e03860889f843215033f"]},"9da451b65a8c7f737cf4c86543852297":{"fileID":"9da451b65a8c7f737cf4c86543852297","name":"TabBar.types.ts","type":"typescript","extension":".ts","language":"file","lines":28,"analyzed":true,"relativePath":"/components/Layout/TabBar/TabBar.types.ts","fileDescription":{},"functions":[],"children":[]},"e719202d8095a83f87627ff2aac4d35a":{"fileID":"e719202d8095a83f87627ff2aac4d35a","name":"TabBarIcon.types.ts","type":"typescript","extension":".ts","language":"file","lines":10,"analyzed":true,"relativePath":"/components/Layout/TabBar/TabBarIcon.types.ts","fileDescription":{},"functions":[],"children":[]},"7f6053ddcc90e03860889f843215033f":{"fileID":"7f6053ddcc90e03860889f843215033f","name":"theme.ts","type":"typescript","extension":".ts","language":"file","lines":353,"analyzed":true,"relativePath":"/constants/theme.ts","fileDescription":{},"functions":[{"arrowFunction":true,"params":[{"name":"isDark"}],"name":"getThemeColors","kind":"const","comment":"/* Export a helper to get current theme colors*/","loc":{"start":{"line":324,"column":0},"end":{"line":325,"column":38}},"code":"export const getThemeColors = (isDark: boolean) => isDark ? COLORS.dark : COLORS.light;","export":true},{"arrowFunction":true,"params":[{"name":"level"}],"name":"shadow","kind":"function","export":false,"code":"shadow: (level: keyof typeof SHADOWS) => SHADOWS[level]","loc":{"start":{"line":351,"column":2},"end":{"line":351,"column":57}},"comment":"/* Shadow presets*/"}],"children":[]},"47fb8279b41c64a9d8477e8b585b05a2":{"fileID":"47fb8279b41c64a9d8477e8b585b05a2","name":"NotificationContext.tsx","type":"react_ts","extension":".tsx","language":"file","relativePath":"/contexts/NotificationContext.tsx","fileDescription":{},"children":["aed8de387df9c9c3657ce8f8493c15b1","234588e8ab809c61aece6c66403a3812","778437e8c0dc203a0fccdb6936c29be8","770c3792fd9003adc608e06cb4e6fb7a","1b4974cfc8307813b1990c85adc88052","c2097ebb51806c377c6e9907a47fae7b","035fb01b40e637252888803129277da2","2e0db00772add360af8f45c915ef2307"]},"aed8de387df9c9c3657ce8f8493c15b1":{"fileID":"aed8de387df9c9c3657ce8f8493c15b1","name":"config.ts","type":"typescript","extension":".ts","language":"file","lines":356,"analyzed":true,"relativePath":"/constants/config.ts","fileDescription":{},"functions":[{"arrowFunction":true,"params":[],"name":"validateConfig","kind":"const","comment":"/* Validate required configuration*/","loc":{"start":{"line":315,"column":0},"end":{"line":337,"column":2}},"code":"const validateConfig = () => {};","export":false}],"children":[]},"234588e8ab809c61aece6c66403a3812":{"fileID":"234588e8ab809c61aece6c66403a3812","name":"api.ts","type":"typescript","extension":".ts","language":"file","lines":388,"analyzed":true,"relativePath":"/types/api.ts","fileDescription":{},"functions":[],"children":[]},"778437e8c0dc203a0fccdb6936c29be8":{"fileID":"778437e8c0dc203a0fccdb6936c29be8","name":"enums.ts","type":"typescript","extension":".ts","language":"file","lines":80,"analyzed":true,"relativePath":"/types/enums.ts","fileDescription":{},"functions":[],"children":[]},"770c3792fd9003adc608e06cb4e6fb7a":{"fileID":"770c3792fd9003adc608e06cb4e6fb7a","name":"models.ts","type":"typescript","extension":".ts","language":"file","lines":404,"analyzed":true,"relativePath":"/types/models.ts","fileDescription":{},"functions":[],"children":["778437e8c0dc203a0fccdb6936c29be8"]},"1b4974cfc8307813b1990c85adc88052":{"fileID":"1b4974cfc8307813b1990c85adc88052","name":"errors.ts","type":"typescript","extension":".ts","language":"file","lines":594,"analyzed":true,"relativePath":"/utils/errors.ts","fileDescription":{},"functions":[{"arrowFunction":true,"params":[{"name":"error"}],"name":"parseError","kind":"const","comment":"/**\n * Extracts a user-friendly error message from complex error objects\n * Handles errors from Supabase, network requests, and other sources\n * @param error - The error object to parse\n * @returns ParsedError with standardized structure\n */","loc":{"start":{"line":44,"column":0},"end":{"line":115,"column":2}},"code":"export const parseError = (error: any): ParsedError => {};","export":true},{"arrowFunction":true,"params":[{"name":"error"}],"name":"isNetworkError","kind":"const","comment":"/**\n * Checks if an error is due to network connectivity issues\n * @param error - The error to check\n * @returns True if the error is network-related\n */","loc":{"start":{"line":122,"column":0},"end":{"line":157,"column":2}},"code":"export const isNetworkError = (error: any): boolean => {};","export":true},{"arrowFunction":true,"params":[{"name":"error"}],"name":"logError","kind":"const","comment":"/**\n * Logs errors to monitoring service (Sentry) with context\n * @param error - The error to log\n * @param context - Additional context about the error\n * @param severity - The severity level of the error\n */","loc":{"start":{"line":165,"column":0},"end":{"line":244,"column":2}},"code":"export const logError = (\n    error: any,\n    context: Partial<ErrorContext> = {},\n    severity: ErrorSeverity = \"medium\"\n): void => {};","export":true},{"arrowFunction":true,"params":[{"name":"error"}],"name":"isApiError","kind":"const","comment":"/**\n * Checks if an error matches our ApiError interface\n */","loc":{"start":{"line":253,"column":0},"end":{"line":260,"column":2}},"code":"const isApiError = (error: any): error is ApiError => {};","export":false},{"arrowFunction":true,"params":[{"name":"error"}],"name":"isSupabaseError","kind":"const","comment":"/**\n * Checks if an error is from Supabase\n */","loc":{"start":{"line":265,"column":0},"end":{"line":273,"column":2}},"code":"const isSupabaseError = (error: any): boolean => {};","export":false},{"arrowFunction":true,"params":[{"name":"error"}],"name":"isResponseError","kind":"const","comment":"/**\n * Checks if an error is a response error (from HTTP requests)\n */","loc":{"start":{"line":278,"column":0},"end":{"line":280,"column":2}},"code":"const isResponseError = (error: any): boolean => {};","export":false},{"arrowFunction":true,"params":[{"name":"error"}],"name":"parseSupabaseError","kind":"const","comment":"/**\n * Parses Supabase-specific errors\n */","loc":{"start":{"line":289,"column":0},"end":{"line":334,"column":2}},"code":"const parseSupabaseError = (error: any): ParsedError => {};","export":false},{"arrowFunction":true,"params":[{"name":"error"}],"name":"parseNetworkError","kind":"const","comment":"/**\n * Parses network/fetch errors\n */","loc":{"start":{"line":339,"column":0},"end":{"line":357,"column":2}},"code":"const parseNetworkError = (error: any): ParsedError => {};","export":false},{"arrowFunction":true,"params":[{"name":"error"}],"name":"parseResponseError","kind":"const","comment":"/**\n * Parses HTTP response errors\n */","loc":{"start":{"line":362,"column":0},"end":{"line":423,"column":2}},"code":"const parseResponseError = (error: any): ParsedError => {};","export":false},{"arrowFunction":true,"params":[{"name":"error"}],"name":"getErrorMessage","kind":"const","comment":"/**\n * Extracts error message from various error formats\n */","loc":{"start":{"line":432,"column":0},"end":{"line":438,"column":2}},"code":"const getErrorMessage = (error: any): string => {};","export":false},{"arrowFunction":true,"params":[{"name":"message"}],"name":"getUserFriendlyMessage","kind":"const","comment":"/**\n * Converts technical error messages to user-friendly ones\n */","loc":{"start":{"line":443,"column":0},"end":{"line":464,"column":2}},"code":"const getUserFriendlyMessage = (message: string): string => {};","export":false},{"arrowFunction":true,"params":[{"name":"description"}],"name":"getUserFriendlyAuthMessage","kind":"const","comment":"/**\n * Converts auth error descriptions to user-friendly messages\n */","loc":{"start":{"line":469,"column":0},"end":{"line":481,"column":2}},"code":"const getUserFriendlyAuthMessage = (description: string): string => {};","export":false},{"arrowFunction":true,"params":[{"name":"error"}],"name":"isRetryableError","kind":"const","comment":"/**\n * Determines if an error is retryable based on its characteristics\n */","loc":{"start":{"line":486,"column":0},"end":{"line":496,"column":2}},"code":"const isRetryableError = (error: Error): boolean => {};","export":false},{"arrowFunction":true,"params":[{"name":"severity"}],"name":"mapSeverityToSentryLevel","kind":"const","comment":"/**\n * Maps our severity levels to Sentry severity levels\n */","loc":{"start":{"line":501,"column":0},"end":{"line":516,"column":2}},"code":"const mapSeverityToSentryLevel = (severity: ErrorSeverity): Sentry.SeverityLevel => {};","export":false},{"arrowFunction":true,"params":[{"name":"componentName"},{"name":"action"}],"name":"createErrorHandler","kind":"const","comment":"/**\n * Creates a standardized error handler for components\n * @param componentName - Name of the component for context\n * @param action - The action that caused the error\n * @returns Error handler function\n */","loc":{"start":{"line":528,"column":0},"end":{"line":538,"column":2}},"code":"export const createErrorHandler = (componentName: string, action: string) => {};","export":true},{"arrowFunction":true,"params":[{"name":"fn"},{"name":"context"}],"name":"withErrorHandling","kind":"const","comment":"/**\n * Wraps async functions with error handling\n * @param fn - The async function to wrap\n * @param context - Error context\n * @returns Wrapped function that handles errors\n */","loc":{"start":{"line":546,"column":0},"end":{"line":558,"column":2}},"code":"export const withErrorHandling = <T extends any[], R>(fn: (...args: T) => Promise<R>, context: Partial<ErrorContext>) => {};","export":true},{"arrowFunction":true,"params":[{"name":"fn"}],"name":"withRetry","kind":"const","comment":"/**\n * Retries a function with exponential backoff\n * @param fn - Function to retry\n * @param maxRetries - Maximum number of retries\n * @param initialDelay - Initial delay in milliseconds\n * @returns Promise that resolves when successful or all retries exhausted\n */","loc":{"start":{"line":567,"column":0},"end":{"line":593,"column":2}},"code":"export const withRetry = async <T>(fn: () => Promise<T>, maxRetries: number = 3, initialDelay: number = 1000): Promise<T> => {};","export":true}],"children":["234588e8ab809c61aece6c66403a3812","aed8de387df9c9c3657ce8f8493c15b1"]},"c2097ebb51806c377c6e9907a47fae7b":{"fileID":"c2097ebb51806c377c6e9907a47fae7b","name":"storage.ts","type":"typescript","extension":".ts","language":"file","lines":446,"analyzed":true,"relativePath":"/utils/storage.ts","fileDescription":{},"functions":[{"arrowFunction":true,"params":[{"name":"key"},{"name":"data"}],"name":"cacheData","kind":"const","comment":"/**\n * Store JSON data in AsyncStorage\n *\n * @param key - Storage key\n * @param data - Data to store (will be JSON stringified)\n * @returns Promise<boolean> - Success status\n */","loc":{"start":{"line":63,"column":0},"end":{"line":72,"column":2}},"code":"export const cacheData = async <T>(key: string, data: T): Promise<boolean> => {};","export":true},{"arrowFunction":true,"params":[{"name":"key"}],"name":"getCachedData","kind":"const","comment":"/**\n * Retrieve JSON data from AsyncStorage\n *\n * @param key - Storage key\n * @returns Promise<T | null> - Retrieved data or null if not found\n */","loc":{"start":{"line":80,"column":0},"end":{"line":95,"column":2}},"code":"export const getCachedData = async <T>(key: string): Promise<T | null> => {};","export":true},{"arrowFunction":true,"params":[{"name":"key"},{"name":"data"},{"name":"ttl"}],"name":"cacheDataWithTTL","kind":"const","comment":"/**\n * Store data with expiration (TTL - Time To Live)\n *\n * @param key - Storage key\n * @param data - Data to store\n * @param ttl - Time to live in milliseconds (optional)\n * @returns Promise<boolean> - Success status\n */","loc":{"start":{"line":105,"column":0},"end":{"line":124,"column":2}},"code":"export const cacheDataWithTTL = async <T>(key: string, data: T, ttl?: number): Promise<boolean> => {};","export":true},{"arrowFunction":true,"params":[{"name":"key"}],"name":"getCachedDataWithTTL","kind":"const","comment":"/**\n * Retrieve data with expiration check\n *\n * @param key - Storage key\n * @returns Promise<T | null> - Retrieved data or null if expired/not found\n */","loc":{"start":{"line":132,"column":0},"end":{"line":162,"column":2}},"code":"export const getCachedDataWithTTL = async <T>(key: string): Promise<T | null> => {};","export":true},{"arrowFunction":true,"params":[{"name":"key"}],"name":"removeCachedData","kind":"const","comment":"/**\n * Remove cached data\n *\n * @param key - Storage key\n * @returns Promise<boolean> - Success status\n */","loc":{"start":{"line":170,"column":0},"end":{"line":178,"column":2}},"code":"export const removeCachedData = async (key: string): Promise<boolean> => {};","export":true},{"arrowFunction":true,"params":[],"name":"clearAllCache","kind":"const","comment":"/**\n * Clear all cached data\n *\n * @returns Promise<boolean> - Success status\n */","loc":{"start":{"line":185,"column":0},"end":{"line":201,"column":2}},"code":"export const clearAllCache = async (): Promise<boolean> => {};","export":true},{"arrowFunction":true,"params":[{"name":"key"},{"name":"value"}],"name":"storeSecureData","kind":"const","comment":"/**\n * Store sensitive data in SecureStore\n *\n * @param key - Storage key\n * @param value - Value to store securely\n * @returns Promise<boolean> - Success status\n */","loc":{"start":{"line":210,"column":0},"end":{"line":221,"column":2}},"code":"export const storeSecureData = async (key: string, value: string): Promise<boolean> => {};","export":true},{"arrowFunction":true,"params":[{"name":"key"}],"name":"getSecureData","kind":"const","comment":"/**\n * Retrieve sensitive data from SecureStore\n *\n * @param key - Storage key\n * @returns Promise<string | null> - Retrieved data or null if not found\n */","loc":{"start":{"line":229,"column":0},"end":{"line":236,"column":2}},"code":"export const getSecureData = async (key: string): Promise<string | null> => {};","export":true},{"arrowFunction":true,"params":[{"name":"key"}],"name":"removeSecureData","kind":"const","comment":"/**\n * Remove sensitive data from SecureStore\n *\n * @param key - Storage key\n * @returns Promise<boolean> - Success status\n */","loc":{"start":{"line":244,"column":0},"end":{"line":252,"column":2}},"code":"export const removeSecureData = async (key: string): Promise<boolean> => {};","export":true},{"arrowFunction":true,"params":[{"name":"settings"}],"name":"storeUserSettings","kind":"const","comment":"/**\n * Store user settings (theme, notifications, etc.)\n *\n * @param settings - User settings object\n * @returns Promise<boolean> - Success status\n */","loc":{"start":{"line":260,"column":0},"end":{"line":271,"column":2}},"code":"export const storeUserSettings = async (settings: Record<string, any>): Promise<boolean> => {};","export":true},{"arrowFunction":true,"params":[],"name":"getUserSettings","kind":"const","comment":"/**\n * Retrieve user settings\n *\n * @returns Promise<Record<string, any> | null> - User settings or null\n */","loc":{"start":{"line":278,"column":0},"end":{"line":294,"column":2}},"code":"export const getUserSettings = async (): Promise<Record<string, any> | null> => {};","export":true},{"arrowFunction":true,"params":[{"name":"action"}],"name":"queueOfflineAction","kind":"const","comment":"/**\n * Add an action to the offline queue\n *\n * Saves an action to be synced when the network is available\n *\n * @param action - Action to queue\n * @returns Promise<boolean> - Success status\n */","loc":{"start":{"line":304,"column":0},"end":{"line":326,"column":2}},"code":"export const queueOfflineAction = async (action: Omit<OfflineAction, \"id\" | \"timestamp\" | \"retryCount\">): Promise<boolean> => {};","export":true},{"arrowFunction":true,"params":[],"name":"getOfflineQueue","kind":"const","comment":"/**\n * Get all queued offline actions\n *\n * @returns Promise<OfflineAction[]> - Array of queued actions\n */","loc":{"start":{"line":333,"column":0},"end":{"line":346,"column":2}},"code":"export const getOfflineQueue = async (): Promise<OfflineAction[]> => {};","export":true},{"arrowFunction":true,"params":[{"name":"actionId"}],"name":"removeOfflineAction","kind":"const","comment":"/**\n * Remove an action from the offline queue\n *\n * @param actionId - ID of the action to remove\n * @returns Promise<boolean> - Success status\n */","loc":{"start":{"line":354,"column":0},"end":{"line":368,"column":2}},"code":"export const removeOfflineAction = async (actionId: string): Promise<boolean> => {};","export":true},{"arrowFunction":true,"params":[],"name":"clearOfflineQueue","kind":"const","comment":"/**\n * Clear all queued offline actions\n *\n * @returns Promise<boolean> - Success status\n */","loc":{"start":{"line":375,"column":0},"end":{"line":383,"column":2}},"code":"export const clearOfflineQueue = async (): Promise<boolean> => {};","export":true},{"arrowFunction":true,"params":[{"name":"actionId"}],"name":"incrementActionRetryCount","kind":"const","comment":"/**\n * Increment retry count for an offline action\n *\n * @param actionId - ID of the action\n * @returns Promise<boolean> - Success status\n */","loc":{"start":{"line":391,"column":0},"end":{"line":410,"column":2}},"code":"export const incrementActionRetryCount = async (actionId: string): Promise<boolean> => {};","export":true},{"arrowFunction":true,"params":[],"name":"getStorageInfo","kind":"const","comment":"/**\n * Get storage info for debugging\n *\n * @returns Promise<object> - Storage statistics\n */","loc":{"start":{"line":417,"column":0},"end":{"line":442,"column":2}},"code":"export const getStorageInfo = async () => {};","export":true}],"children":[]},"035fb01b40e637252888803129277da2":{"fileID":"035fb01b40e637252888803129277da2","name":"notificationService.ts","type":"typescript","extension":".ts","language":"file","lines":265,"analyzed":true,"relativePath":"/services/notification/notificationService.ts","fileDescription":{},"functions":[{"arrowFunction":false,"params":[{"name":"userId"}]},{"arrowFunction":false,"params":[{"name":"data"}]},{"arrowFunction":false,"params":[{"name":"data"}]},{"arrowFunction":false,"params":[{"name":"dbNotification"}]}],"children":["2e0db00772add360af8f45c915ef2307","aed8de387df9c9c3657ce8f8493c15b1","234588e8ab809c61aece6c66403a3812","770c3792fd9003adc608e06cb4e6fb7a","778437e8c0dc203a0fccdb6936c29be8","1b4974cfc8307813b1990c85adc88052"]},"2e0db00772add360af8f45c915ef2307":{"fileID":"2e0db00772add360af8f45c915ef2307","name":"databaseService.ts","type":"typescript","extension":".ts","language":"file","lines":177,"analyzed":true,"relativePath":"/services/database/databaseService.ts","fileDescription":{},"functions":[{"arrowFunction":true,"params":[],"name":"checkDatabaseConnection","kind":"const","comment":"/**\n * Database connection health check\n *\n * This function can be used to verify that the database connection is working\n * properly. It's useful for debugging connection issues or health monitoring.\n *\n * @returns Promise<boolean> - True if connection is healthy, false otherwise\n */","loc":{"start":{"line":88,"column":0},"end":{"line":103,"column":2}},"code":"export const checkDatabaseConnection = async (): Promise<boolean> => {};","export":true},{"arrowFunction":true,"params":[],"name":"getDatabaseInfo","kind":"const","comment":"/**\n * Get current database configuration info\n *\n * Useful for debugging and monitoring\n *\n * @returns Object containing non-sensitive configuration details\n */","loc":{"start":{"line":112,"column":0},"end":{"line":118,"column":2}},"code":"export const getDatabaseInfo = () => {};","export":true},{"arrowFunction":true,"params":[{"name":"error"},{"name":"operation"}],"name":"handleDatabaseError","kind":"const","comment":"/**\n * Database error handler utility\n *\n * Provides consistent error handling across the application\n *\n * @param error - The error from a Supabase operation\n * @param operation - Description of the operation that failed\n * @returns Formatted error object\n */","loc":{"start":{"line":129,"column":0},"end":{"line":143,"column":2}},"code":"export const handleDatabaseError = (error: any, operation: string) => {};","export":true}],"children":["ec752bffe7da912d0d687420b3a7b3b6","aed8de387df9c9c3657ce8f8493c15b1"]},"ec752bffe7da912d0d687420b3a7b3b6":{"fileID":"ec752bffe7da912d0d687420b3a7b3b6","name":"database.types.ts","type":"typescript","extension":".ts","language":"file","lines":746,"analyzed":true,"relativePath":"/types/database.types.ts","fileDescription":{},"functions":[],"children":[]}}}